#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tracker:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//==============================================================================
// Global Variable
//==============================================================================
let list = [];

global.list = list;

var count = 0;

//==============================================================================
// Socket.io
//==============================================================================
var io = require('socket.io').listen(server);

var database = require('../public/javascripts/database.js');

io.sockets.on('connection', function (socket) {
  socket.on('join', function (data) {
    socket.join(data);
  });

  socket.on('location', function (data) {
    database.insert(data).then(function () {
      database.select().then(function (records) {
        console.log("insert : " + data);

        io.sockets.emit('update', data);
      }).catch((error) => setImmediate(() => {
        console.log(error);;
      }));
    }).catch((error) => setImmediate(() => {
      console.log(error);
    }));

    io.sockets.in(data.name).emit('receive', {
      name: data.name,
      latitude: data.latitude,
      longitude: data.longitude,
      date: new Date().toLocaleString()
    });
  });

  socket.on('clear', function (data) {
    database.clear().then(function (result) {
      database.select().then(function (records) {
        console.log("clear : " + result);

        io.sockets.emit('update', records);
      }).catch((error) => setImmediate(() => {
        console.log(error);
      }));
    }).catch((error) => setImmediate(() => {
      console.log(error);
    }));
  });

  console.log('socket.io is connected.');
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
