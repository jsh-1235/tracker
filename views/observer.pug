extends layout

block style
  style. 
    .list-group{
      max-height: 70vh;
      margin-bottom: 0px;
      overflow:scroll;
      overflow-x: hidden;
      -webkit-overflow-scrolling: touch;
    }

    button{
      min-width : 100px;
    }

block content
  div
    button(id="btnLoad" type="button" class="btn btn-outline-primary mr-1")
      div
        span(id="spinner" class="spinner-border spinner-border-sm text-primary mr-1" role="status" aria-hidden="true")
        span Load
    button(id="btnSearch" type="button" class="btn btn-outline-primary mr-1") Search
    button(id="btnAdd" type="button" class="btn btn-outline-primary mr-1") +
    button(id="btnClear" type="button" class="btn btn-outline-primary mr-1") Clear
    hr

  div(class="row" style="width:100%; height: 70vh;")   
    div(class="col-sm")
      ul(id="list-content" class="list-group")

    div(id="map" class="col-sm")

block script
  script(src="http://code.jquery.com/jquery-3.5.1.min.js")
  script(async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBosCx0p2Q-8N2RUE-XmJO2muor7lB-JUI&callback=initMap&region=kr")

  script.
    let map;
    let markers = [];

    var list = [];

    var socket = io.connect();

    function initMap() {
      var seoul = { lat: 37.5642135, lng: 127.0016985 };

      //- map = new google.maps.Map(document.getElementById('map'), { zoom: 12, center: seoul, mapTypeId: "terrain" });
      map = new google.maps.Map(document.getElementById('map'), { zoom: 12, center: seoul });

      //- This event listener will call addMarker() when the map is clicked.
      map.addListener("click", event => {
        //addMarker(event.latLng);
      });

      //- Adds a marker at the center of the map.
      //addMarker(seoul);
    }

    //- Adds a marker to the map and push to the array.
    function addMarker(location) {
      const marker = new google.maps.Marker({
        position: location,
        map: map
      });
      markers.push(marker);
    }

    //- Sets the map on all markers in the array.
    function setMapOnAll(map) {
      for (let i = 0; i < markers.length; i++) {
        markers[i].setMap(map);
      }
    }

    //- Removes the markers from the map, but keeps them in the array.
    function clearMarkers() {
      setMapOnAll(null);
    }

    //- Shows any markers currently in the array.
    function showMarkers() {
      setMapOnAll(map);
    }

    // Deletes all markers in the array by removing references to them.
    function deleteMarkers() {
      clearMarkers();
      markers = [];
    }

    function moveMap(location) {
      map.panTo(location); map.setZoom(12);
    }

    function addMap(name){
      clearMarkers();

      list = [];

      $.getJSON('/show', { name: name }, function (data) {
        $.each(data, function (index, item) {
          //console.log("(" + index + ") " + item.name + " [" + item.latitude + " : " + item.longitude + "]");

          list.push(data[index]);            
        });

        $('#list-content').empty();

        for (i = 0; i < list.length; i++) {
          var id = "'" + list[i].id + "'";

          //- console.log("id : " + id);

          var output = '<div>';
          output += '<h5>' + list[i].name + '</h5>';
          output += '<h6>' + list[i].latitude + " / " + list[i].longitude + '</h6>';          
          output += '<p>' + list[i].date + '</p>'
          output += '</div>'

          $("#list-content").append('<li class="list-group-item d-flex justify-content-between align-items-center">' + output + '<button type="button" class="btn btn-outline-primary" onclick="showMap(' + id  + ')">' + "SHOW" + '</button>' + '</li>');                

          //- $("#list-content").append('<li class="list-group-item d-flex justify-content-between align-items-center">' + list[i].name + '<button type="button" class="btn btn-outline-primary" onclick="showMap(' + id  + ')">' + "SHOW" + '</button>' + '</li>');                

          var location = { lat: list[i].latitude, lng: list[i].longitude };

          addMarker(location);
        }
      });        
    }

    function showMap(id){      
      for(var i = 0; i < list.length; i++){
        if(list[i].id == id){
          var location = { lat: list[i].latitude, lng: list[i].longitude };

          moveMap(location);

          break;
        }
      }
    }

    $(document).ready(function () {     
      $("#btnLoad").click(function(){        
        var name = null;

        socket.emit('join', name);        
      
        addMap(name);

        $('#spinner').hide('slow');
      }); 

      $("#btnSearch").click(function(){  
        var name = prompt('이름을 입력하세요.', '이름');

        socket.emit('join', name);  

        addMap(name); 
      }); 

      $("#btnAdd").click(function(){  
        navigator.geolocation.getCurrentPosition((position) => {          
          socket.emit('location', {
            name: list.length.toString(),
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
          });          
        });       
      }); 

      $("#btnClear").click(function(){ 
        clearMarkers();

        socket.emit('clear', {
          option: "all"            
        });
      });   

      socket.on('update', function (data) {
        if(data.length != 0){          
          console.log("receive : " + data.name + " [" + data.latitude + " : " + data.longitude + "]");
          
          var location = { lat: data.latitude, lng: data.longitude };

          //addMarker(location);

          moveMap(location);
        }else{
          console.log("Data is null.");
        }

        addMap(null);
      });    
    });



